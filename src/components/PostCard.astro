---
import FormattedDate from './FormattedDate.astro';
import { categories } from '../data/categories';

interface Props {
	post: {
		id: string;
		data: {
			title: string;
			description: string;
			pubDate: Date;
			category?: string;
			subcategory?: string;
			language: string[];
			readingTime?: number;
			tags?: string[];
		};
	};
}

const { post } = Astro.props;

// Find the category data
const categoryData = post.data.category ? categories.find(cat => cat.id === post.data.category) : null;
---

<article class="post-card">
	<div class="post-content">
		<div class="post-meta">
			<div class="meta-details">
				{categoryData && (
					<nav class="category-nav" aria-label="Post categories">
						<a href={`/categories/${post.data.category?.toLowerCase()}/`} class="category-link">
							{categoryData.icon} {categoryData.name}
							{post.data.subcategory && <span class="subcategory">/ {post.data.subcategory}</span>}
						</a>
					</nav>
				)}
				<span class="separator">•</span>
				<FormattedDate date={post.data.pubDate} />
				{post.data.readingTime && (
					<>
						<span class="separator">•</span>
						<span>{post.data.readingTime} min read</span>
					</>
				)}
			</div>
		</div>

		<a href={`/blog/${post.id}/`} class="post-title-link">
			<h2 class="post-title">{post.data.title}</h2>
		</a>
		<p class="post-excerpt">{post.data.description}</p>
	</div>

	<div class="post-tags">
		{post.data.tags && post.data.tags.map((tag: string) => (
			<span class="tag">{tag}</span>
		))}
	</div>
</article>

<style>
	.post-card {
		background: rgb(var(--gray-light));
		border-radius: 16px;
		padding: 2rem;
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
		border: 1px solid rgba(0, 0, 0, 0.08);
		display: flex;
		flex-direction: column;
		gap: 1.5rem;
	}

	.post-card:hover {
		transform: translateY(-4px);
		box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
		border-color: rgba(0, 0, 0, 0.12);
	}

	.post-content {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		flex: 1;
	}

	.post-meta {
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
	}

	.meta-details {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		font-size: 0.9rem;
		color: rgb(var(--gray));
		flex-wrap: wrap;
	}

	.dot {
		color: rgb(var(--gray));
		opacity: 0.6;
	}

	.post-title-link {
		text-decoration: none;
		color: inherit;
		display: block;
	}

	.post-title-link:hover .post-title {
		color: rgb(var(--accent));
	}

	.post-title {
		font-size: 1.75rem;
		margin: 0;
		color: rgb(var(--black));
		line-height: 1.3;
		font-weight: 700;
		letter-spacing: -0.01em;
	}

	.post-excerpt {
		margin: 0;
		color: rgb(var(--gray-dark));
		line-height: 1.6;
		font-size: 1rem;
	}

	.post-tags {
		display: flex;
		gap: 0.5rem;
		flex-wrap: wrap;
		padding-top: 1rem;
		border-top: 1px solid rgba(0, 0, 0, 0.08);
	}

	.tag {
		background: rgba(var(--gray-dark), 0.08);
		color: rgb(var(--gray-dark));
		padding: 0.4rem 0.8rem;
		border-radius: 8px;
		font-size: 0.85rem;
		font-weight: 500;
		letter-spacing: 0.01em;
		transition: all 0.2s ease;
		text-decoration: none;
		display: inline-flex;
		align-items: center;
		gap: 0.4rem;
	}

	.tag:hover {
		background: rgba(var(--gray-dark), 0.12);
	}

	.category-nav {
		display: inline-block;
		margin-right: 0.5em;
		font-size: 1rem;
		vertical-align: middle;
	}
	.category-link {
		color: #1a202c;
		text-decoration: none;
		font-weight: 600;
		transition: color 0.2s;
	}
	.category-link:hover {
		color: #2563eb;
		text-decoration: underline;
	}
	.separator {
		color: rgb(var(--gray));
		opacity: 0.6;
	}
	.subcategory {
		color: #4b5563;
		font-weight: 500;
		margin-left: 0.25em;
	}

	@media (max-width: 720px) {
		.post-card {
			padding: 1.5rem;
		}

		.post-title {
			font-size: 1.5rem;
		}

		.post-excerpt {
			font-size: 0.9375rem;
		}

		.post-meta {
			gap: 0.5rem;
		}
	}
</style> 