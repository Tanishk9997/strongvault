---
import FormattedDate from './FormattedDate.astro';
import { categories } from '../data/categories';

interface Props {
	post: {
		id: string;
		data: {
			title: string;
			description: string;
			pubDate: Date;
			category?: string[];
			subcategory?: string;
			language: string[];
			readingTime?: number;
			tags?: string[];
		};
	};
	translations?: {
		id: string;
		language: string;
	}[];
}

const { post, translations } = Astro.props;

// Find the category data for all categories
const categoryData = post.data.category?.map(catId => categories.find(cat => cat.id === catId)) || [];

// Get the alternate language translation if it exists
const alternateTranslation = translations?.find(t => t.id !== post.id);
---

<article class="post-card">
	<div class="post-content">
		<div class="post-meta">
			<div class="meta-details">
				{categoryData.length > 0 && (
					<nav class="category-nav" aria-label="Post categories">
						{categoryData.map((cat, index) => (
							<>
								<a href={`/category/${cat?.id}/`} class="category-link">
									<span class="category-icon">{cat?.icon}</span>
									<span class="category-name">{cat?.name}</span>
									{post.data.subcategory && index === 0 && <span class="subcategory">/ {post.data.subcategory}</span>}
								</a>
								{index < categoryData.length - 1 && <span class="separator">â€¢</span>}
							</>
						))}
					</nav>
				)}
				{categoryData.length > 0 && <span class="separator">â€¢</span>}
				<FormattedDate date={post.data.pubDate} />
				{post.data.readingTime && (
					<>
						<span class="separator">â€¢</span>
						<span class="reading-time">{post.data.readingTime} min read</span>
					</>
				)}
				{alternateTranslation && (
					<>
						<span class="separator">â€¢</span>
						<a 
							href={`/blog/${alternateTranslation.id}/`} 
							class="language-switch"
							aria-label={`Read in ${alternateTranslation.language === 'en' ? 'English' : 'Spanish'}`}
						>
							<span class="flag">{alternateTranslation.language === 'en' ? 'ðŸ‡ºðŸ‡¸' : 'ðŸ‡µðŸ‡·'}</span>
							<span class="text">{alternateTranslation.language === 'en' ? 'English' : 'EspaÃ±ol'}</span>
						</a>
					</>
				)}
			</div>
		</div>

		<a href={`/blog/${post.id}/`} class="post-title-link">
			<h2 class="post-title">{post.data.title}</h2>
		</a>
		<p class="post-excerpt">{post.data.description}</p>
	</div>

	{post.data.tags && post.data.tags.length > 0 && (
		<div class="post-tags">
			{post.data.tags.map((tag: string) => (
				<span class="tag">{tag}</span>
			))}
		</div>
	)}
</article>

<style>
	.post-card {
		background: var(--background-color);
		border-radius: 16px;
		padding: var(--space-6);
		transition: all var(--transition-duration) var(--transition-timing);
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.02);
		border: 1px solid var(--border-color);
		display: flex;
		flex-direction: column;
		gap: var(--space-5);
		position: relative;
		overflow: hidden;
		
		&::before {
			content: '';
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			height: 3px;
			background: linear-gradient(90deg, var(--accent), var(--accent-dark));
			opacity: 0;
			transition: opacity var(--transition-duration) var(--transition-timing);
		}
		
		&:hover {
			transform: translateY(-2px);
			box-shadow: var(--box-shadow);
			border-color: var(--accent);
			
			&::before {
				opacity: 1;
			}
		}
	}

	.language-switch {
		display: inline-flex;
		align-items: center;
		gap: var(--space-2);
		color: rgb(var(--gray));
		text-decoration: none;
		font-weight: 500;
		font-size: 0.875rem;
		transition: all var(--transition-duration) var(--transition-timing);
		padding: var(--space-1) var(--space-2);
		border-radius: 4px;
		
		&:hover {
			color: var(--accent);
			background: rgba(var(--gray-light), 0.2);
		}
		
		.flag {
			font-size: 1.125em;
		}
		
		.text {
			white-space: nowrap;
		}
	}

	.post-content {
		display: flex;
		flex-direction: column;
		gap: var(--space-4);
		flex: 1;
	}

	.post-meta {
		display: flex;
		flex-direction: column;
		gap: var(--space-3);
	}

	.meta-details {
		display: flex;
		align-items: center;
		gap: var(--space-3);
		font-size: 0.875rem;
		color: rgb(var(--gray));
		flex-wrap: wrap;
	}

	.category-nav {
		display: inline-flex;
		align-items: center;
		gap: var(--space-3);
	}

	.category-link {
		color: rgb(var(--black));
		text-decoration: none;
		font-weight: 600;
		transition: all var(--transition-duration) var(--transition-timing);
		padding: var(--space-2) var(--space-3);
		border-radius: 6px;
		background: rgba(var(--gray-light), 0.2);
		display: inline-flex;
		align-items: center;
		gap: var(--space-2);
		font-size: 0.875rem;
		
		&:hover {
			color: var(--accent);
			background: rgba(var(--gray-light), 0.3);
			transform: translateY(-1px);
		}
		
		.category-icon {
			font-size: 1.1em;
		}
		
		.category-name {
			position: relative;
		}
		
		.subcategory {
			color: rgb(var(--gray));
			font-weight: 500;
			margin-left: 0.25em;
		}
	}

	.separator {
		color: rgb(var(--gray));
		opacity: 0.5;
	}

	.reading-time {
		display: inline-flex;
		align-items: center;
		gap: var(--space-1);
	}

	.post-title-link {
		text-decoration: none;
		color: inherit;
		display: block;
		
		&:hover .post-title {
			color: var(--accent);
		}
	}

	.post-title {
		font-size: 1.75rem;
		margin: 0;
		color: rgb(var(--black));
		line-height: 1.3;
		font-weight: 700;
		letter-spacing: -0.02em;
		transition: color var(--transition-duration) var(--transition-timing);
	}

	.post-excerpt {
		color: rgb(var(--gray));
		line-height: 1.6;
		margin: 0;
		font-size: 1.0625rem;
	}

	.post-tags {
		display: flex;
		flex-wrap: wrap;
		gap: var(--space-2);
		margin-top: var(--space-2);
	}

	.tag {
		font-size: 0.8125rem;
		padding: var(--space-1) var(--space-3);
		background: rgba(var(--gray-light), 0.2);
		border-radius: 4px;
		color: rgb(var(--gray));
		transition: all var(--transition-duration) var(--transition-timing);
		
		&:hover {
			background: rgba(var(--gray-light), 0.3);
			color: rgb(var(--black));
		}
	}

	@media (max-width: 768px) {
		.post-card {
			padding: var(--space-5);
		}

		.post-title {
			font-size: 1.5rem;
		}

		.post-excerpt {
			font-size: 1rem;
		}
	}
</style> 