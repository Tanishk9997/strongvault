---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import BackToTop from '../components/BackToTop.astro';

type Props = CollectionEntry<'blog'>['data'];

const { 
	title, 
	description, 
	pubDate, 
	updatedDate, 
	heroImage,
	readingTime,
	tags,
	category,
	subcategory,
	language
} = Astro.props;

const languageEmojis = {
	en: 'ðŸ‡ºðŸ‡¸',
	es: 'ðŸ‡µðŸ‡·'
};
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={title} description={description} image={heroImage} />
	</head>
	<body>
		<Header />
		<main>
			<article>
				<div class="article-header">
					{heroImage && (
						<div class="hero-image">
							<img width={1020} height={510} src={heroImage} alt="" />
						</div>
					)}
					<div class="prose">
						<div class="title-container">
							<div class="metadata">
								<div class="primary-meta">
									<div class="category-tags">
										{category && <span class="category-label">{category}</span>}
										{subcategory && <span class="category-label">{subcategory}</span>}
									</div>
									<div class="reading-stats">
										{language.map(lang => <span class="language-flag">{languageEmojis[lang]}</span>)}
										{readingTime && <span class="reading-time">â€¢ {readingTime} min read</span>}
									</div>
								</div>
							</div>
							<h1>{title}</h1>
							<div class="date-info">
								<FormattedDate date={pubDate} />
								{updatedDate && (
									<span class="last-updated-on">
										â€¢ Updated <FormattedDate date={updatedDate} />
									</span>
								)}
							</div>
						</div>
					</div>
				</div>

				<div class="prose content">
					<slot />

					{tags && tags.length > 0 && (
						<div class="tags">
							{tags.map((tag) => (
								<span class="tag">{tag}</span>
							))}
						</div>
					)}
				</div>
			</article>
		</main>
		<Footer />
		<BackToTop />
	</body>
</html>

<style>
	main {
		min-height: calc(100vh - 200px);
		padding: 1rem 0;
	}

	.article-header {
		margin-bottom: 4rem;
		background: linear-gradient(to bottom, rgb(var(--gray-light)) 0%, transparent 100%);
		padding: 2rem 0 4rem 0;
	}

	.hero-image {
		width: 100%;
		margin-bottom: 2rem;
	}

	.hero-image img {
		display: block;
		margin: 0 auto;
		border-radius: 12px;
		box-shadow: var(--box-shadow);
	}

	.prose {
		width: 720px;
		max-width: calc(100% - 2em);
		margin: auto;
		padding: 0 1em;
	}

	.content {
		padding-top: 2rem;
	}

	.title-container {
		text-align: center;
	}

	.metadata {
		margin-bottom: 1.5rem;
	}

	.primary-meta {
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
		align-items: center;
		margin-bottom: 1rem;
	}

	.category-tags {
		display: flex;
		gap: 0.5rem;
	}

	.category-label {
		font-size: 0.9rem;
		color: rgb(var(--accent));
		font-weight: 500;
	}

	.category-label:not(:last-child)::after {
		content: "/";
		margin-left: 0.5rem;
		color: rgb(var(--gray));
	}

	.reading-stats {
		font-size: 0.9rem;
		color: rgb(var(--gray));
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.language-flag {
		font-size: 1.1rem;
	}

	h1 {
		font-size: 2.5rem;
		line-height: 1.2;
		margin: 0 0 1rem 0;
	}

	.date-info {
		font-size: 0.9rem;
		color: rgb(var(--gray));
	}

	.last-updated-on {
		font-style: italic;
	}

	.tags {
		display: flex;
		gap: 0.5em;
		flex-wrap: wrap;
		margin-top: 2em;
	}

	.tag {
		background: rgb(var(--accent));
		color: white;
		padding: 0.25em 0.5em;
		border-radius: 4px;
		font-size: 0.8em;
	}

	@media (max-width: 720px) {
		.article-header {
			padding: 1rem 0 2rem 0;
		}

		.prose {
			padding: 0 1rem;
		}

		h1 {
			font-size: 2rem;
		}

		.primary-meta {
			gap: 0.5rem;
		}
	}
</style>
