---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import BackToTop from '../components/BackToTop.astro';
import '../styles/components/BlogPost.css';

type Props = CollectionEntry<'blog'>['data'];

const { 
	title, 
	description, 
	pubDate, 
	updatedDate, 
	heroImage,
	readingTime,
	tags,
	category,
	subcategory,
	language,
	// SEO fields
	canonicalUrl,
	ogImage,
	ogImageAlt,
	robots
} = Astro.props;

const languageEmojis = {
	en: 'üá∫üá∏',
	es: 'üáµüá∑'
};

const categoryEmojis: Record<string, string> = {
	technology: 'üíª',
	programming: 'üë®‚Äçüíª',
	web: 'üåê',
	security: 'üîí',
	devops: 'üîÑ',
	cloud: '‚òÅÔ∏è',
	ai: 'ü§ñ',
	blockchain: '‚õìÔ∏è',
	'web-development': 'üñ•Ô∏è',
	'cyber-security': 'üõ°Ô∏è',
	'cloud-computing': '‚òÅÔ∏è',
	'devops-practices': 'üîÑ',
	'programming-languages': 'üìù',
	'data-science': 'üìä',
	'blockchain-technology': '‚õìÔ∏è',
	'web-design': 'üé®',
	'web-security': 'üîê',
	'cloud-security': '‚òÅÔ∏èüîí',
	'devops-tools': 'üõ†Ô∏è',
	'programming-tips': 'üí°',
	'data-analysis': 'üìà',
	'blockchain-development': '‚õìÔ∏èüíª'
};

const capitalize = (str: string) => str ? str.charAt(0).toUpperCase() + str.slice(1) : '';
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead 
			title={title} 
			description={description} 
			image={heroImage}
			canonicalUrl={canonicalUrl}
			ogImage={ogImage}
			ogImageAlt={ogImageAlt}
			robots={robots}
		/>
	</head>
	<body>
		<Header />
		<main>
			<article>
				<header class="article-header">
					{heroImage && <img width={1020} height={510} src={heroImage} alt="" />}
					<div class="content">
						<div class="metadata">
							<nav class="category-nav" aria-label="Post categories">
								{category && (
									<a href={`/categories/${category.toLowerCase()}/`} class="category-link">
										{categoryEmojis[category.toLowerCase()] || 'üìù'} {capitalize(category)}
										{subcategory && ` / ${capitalize(subcategory)}`}
									</a>
								)}
							</nav>
							<span class="separator">‚Ä¢</span>
							<FormattedDate date={pubDate} />
							{updatedDate && (
								<>
									<span class="separator">‚Ä¢</span>
									<span>Updated <FormattedDate date={updatedDate} /></span>
								</>
							)}
							{readingTime && (
								<>
									<span class="separator">‚Ä¢</span>
									<span>{readingTime} min read</span>
								</>
							)}
							{language.map(lang => (
								<span class="language">{languageEmojis[lang]}</span>
							))}
						</div>
						<h1>{title}</h1>
					</div>
				</header>

				<div class="prose">
					<slot />

					{tags && tags.length > 0 && (
						<div class="tags">
							{tags.map((tag) => (
								<span class="tag">{tag}</span>
							))}
						</div>
					)}
				</div>
			</article>
		</main>
		<Footer />
		<BackToTop />
	</body>
</html>

<style>
	main {
		min-height: calc(100vh - 200px);
		width: 100%;
		max-width: 720px;
		margin: 0 auto;
		padding: 1rem;
	}

	.article-header {
		margin-bottom: 2rem;
	}

	.article-header img {
		width: 100%;
		height: auto;
		border-radius: 8px;
		margin-bottom: 1rem;
	}

	.article-header .content {
		padding: 0 0.5rem;
	}

	.metadata {
		display: flex;
		flex-wrap: wrap;
		align-items: center;
		gap: 0.5rem;
		font-size: 0.875rem;
		color: rgb(var(--gray));
		margin-bottom: 1rem;
	}

	.category-nav {
		display: inline-block;
		margin-right: 0.5em;
		font-size: 0.875rem;
		vertical-align: middle;
	}

	.category-link {
		color: rgb(var(--black));
		text-decoration: none;
		font-weight: 600;
		transition: color 0.2s;
	}

	.category-link:hover {
		color: var(--accent);
		text-decoration: underline;
	}

	.separator {
		color: rgb(var(--gray-light));
	}

	.language {
		margin-left: 0.5rem;
	}

	.prose {
		padding: 0 0.5rem;
	}

	.tags {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
		margin-top: 2rem;
	}

	.tag {
		background: rgb(var(--gray-light));
		padding: 0.25rem 0.75rem;
		border-radius: 1rem;
		font-size: 0.875rem;
	}

	@media (min-width: 768px) {
		main {
			padding: 2rem;
		}

		.article-header .content {
			padding: 0 1rem;
		}

		.metadata {
			font-size: 1rem;
		}

		.category-nav {
			font-size: 1rem;
		}

		.prose {
			padding: 0 1rem;
		}
	}
</style>
