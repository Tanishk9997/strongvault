---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';

// Pagination settings
const POSTS_PER_PAGE = 5;
const currentPage = Number(Astro.url.searchParams.get('page') || 1);

// Get all blog posts and sort by date
const allPosts = (await getCollection('blog'))
	.filter((post) => !post.data.draft)
	.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Calculate pagination
const totalPages = Math.ceil(allPosts.length / POSTS_PER_PAGE);
const startIndex = (currentPage - 1) * POSTS_PER_PAGE;
const endIndex = startIndex + POSTS_PER_PAGE;
const posts = allPosts.slice(startIndex, endIndex);

// Generate excerpt from content
function getExcerpt(content: string, maxLength = 200) {
	const plainText = content.replace(/<[^>]*>/g, '');
	return plainText.length > maxLength
		? plainText.substring(0, maxLength) + '...'
		: plainText;
}
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={`${SITE_TITLE} - Blog`} description={SITE_DESCRIPTION} />
		<style>
			main {
				width: 960px;
				max-width: 100%;
				margin: 0 auto;
				padding: 2em;
			}
			.blog-header {
				text-align: center;
				margin-bottom: 2em;
			}
			.blog-header h1 {
				font-size: 2.5em;
				margin-bottom: 0.5em;
			}
			.posts-grid {
				display: grid;
				gap: 2em;
			}
			.post-card {
				background: rgb(var(--gray-light));
				border-radius: 12px;
				padding: 1.5em;
				transition: transform 0.2s ease;
			}
			.post-card:hover {
				transform: translateY(-4px);
			}
			.post-card a {
				text-decoration: none;
				color: inherit;
			}
			.post-meta {
				display: flex;
				align-items: center;
				gap: 1em;
				margin-bottom: 1em;
				font-size: 0.9em;
				color: rgb(var(--gray));
			}
			.post-title {
				font-size: 1.5em;
				margin: 0 0 0.5em 0;
				color: rgb(var(--black));
			}
			.post-excerpt {
				margin: 0 0 1em 0;
				color: rgb(var(--gray-dark));
			}
			.post-tags {
				display: flex;
				gap: 0.5em;
				flex-wrap: wrap;
				margin-top: 1em;
			}
			.tag {
				background: rgb(var(--accent));
				color: white;
				padding: 0.25em 0.5em;
				border-radius: 4px;
				font-size: 0.8em;
			}
			.category-badge {
				background: rgb(var(--accent-light));
				color: rgb(var(--accent));
				padding: 0.25em 0.5em;
				border-radius: 4px;
				font-size: 0.8em;
				font-weight: bold;
			}
			.pagination {
				display: flex;
				justify-content: center;
				gap: 1em;
				margin-top: 2em;
			}
			.pagination a {
				padding: 0.5em 1em;
				border-radius: 4px;
				text-decoration: none;
				color: rgb(var(--accent));
			}
			.pagination a:hover {
				background: rgb(var(--accent-light));
			}
			.pagination .current {
				background: rgb(var(--accent));
				color: white;
			}
			@media (max-width: 720px) {
				main {
					padding: 1em;
				}
				.post-meta {
					flex-direction: column;
					align-items: flex-start;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<div class="blog-header">
				<h1>Blog</h1>
				<p>Latest articles about security, privacy, and encryption</p>
			</div>

			<div class="posts-grid">
				{posts.map((post) => (
					<article class="post-card">
						<a href={`/blog/${post.id}/`}>
							<div class="post-meta">
								<span class="category-badge">{post.data.category}</span>
								<FormattedDate date={post.data.pubDate} />
								{post.data.readingTime && <span>⏱️ {post.data.readingTime} min read</span>}
							</div>
							<h2 class="post-title">{post.data.title}</h2>
							<p class="post-excerpt">{getExcerpt(post.body)}</p>
							{post.data.tags && post.data.tags.length > 0 && (
								<div class="post-tags">
									{post.data.tags.map((tag) => (
										<span class="tag">{tag}</span>
									))}
								</div>
							)}
						</a>
					</article>
				))}
			</div>

			{totalPages > 1 && (
				<div class="pagination">
					{currentPage > 1 && (
						<a href={`/blog/?page=${currentPage - 1}`}>&larr; Previous</a>
					)}
					{Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
						<a
							href={`/blog/?page=${page}`}
							class={page === currentPage ? 'current' : ''}
						>
							{page}
						</a>
					))}
					{currentPage < totalPages && (
						<a href={`/blog/?page=${currentPage + 1}`}>Next &rarr;</a>
					)}
				</div>
			)}
		</main>
		<Footer />
	</body>
</html>
