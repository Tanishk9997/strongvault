---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import { categories } from '../../data/categories';
import BaseLayout from '../../layouts/BaseLayout.astro';
import FormattedDate from '../../components/FormattedDate.astro';

export async function getStaticPaths() {
  return categories.map((category) => ({
    params: { category: category.id },
    props: { category },
  }));
}

interface Props {
  category: typeof categories[0];
}

const { category } = Astro.props;
const posts = await getCollection('blog');
const categoryPosts = posts
  .filter((post: CollectionEntry<'blog'>) => post.data.category === category.id)
  .sort((a: CollectionEntry<'blog'>, b: CollectionEntry<'blog'>) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
---

<BaseLayout title={`${category.name} - StrongVault`}>
  <main>
    <div class="blog-header">
      <h1>{category.icon} {category.name}</h1>
      <p>{category.description}</p>
    </div>

    <div class="posts-grid">
      {categoryPosts.map((post: CollectionEntry<'blog'>) => (
        <article class="post-card">
          <a href={`/blog/${post.id}/`}>
            <div class="post-meta">
              <FormattedDate date={post.data.pubDate} />
              {post.data.readingTime && <span>⏱️ {post.data.readingTime} min read</span>}
            </div>
            <h2 class="post-title">{post.data.title}</h2>
            <p class="post-excerpt">{post.data.description}</p>
            {post.data.tags && post.data.tags.length > 0 && (
              <div class="post-tags">
                {post.data.tags.map((tag: string) => (
                  <span class="tag">{tag}</span>
                ))}
              </div>
            )}
          </a>
        </article>
      ))}
    </div>
  </main>
</BaseLayout>

<style>
  main {
    width: 960px;
    max-width: 100%;
    margin: 0 auto;
    padding: 2em;
  }
  .blog-header {
    text-align: center;
    margin-bottom: 2em;
  }
  .blog-header h1 {
    font-size: 2.5em;
    margin-bottom: 0.5em;
  }
  .posts-grid {
    display: grid;
    gap: 2em;
  }
  .post-card {
    background: rgb(var(--gray-light));
    border-radius: 12px;
    padding: 1.5em;
    transition: transform 0.2s ease;
  }
  .post-card:hover {
    transform: translateY(-4px);
  }
  .post-card a {
    text-decoration: none;
    color: inherit;
  }
  .post-meta {
    display: flex;
    align-items: center;
    gap: 1em;
    margin-bottom: 1em;
    font-size: 0.9em;
    color: rgb(var(--gray));
  }
  .post-title {
    font-size: 1.5em;
    margin: 0 0 0.5em 0;
    color: rgb(var(--black));
  }
  .post-excerpt {
    margin: 0 0 1em 0;
    color: rgb(var(--gray-dark));
  }
  .post-tags {
    display: flex;
    gap: 0.5em;
    flex-wrap: wrap;
    margin-top: 1em;
  }
  .tag {
    background: rgb(var(--accent));
    color: white;
    padding: 0.25em 0.5em;
    border-radius: 4px;
    font-size: 0.8em;
  }
  @media (max-width: 720px) {
    main {
      padding: 1em;
    }
    .post-meta {
      flex-direction: column;
      align-items: flex-start;
    }
  }
</style> 