---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import PostCard from '../../components/PostCard.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import { categories } from '../../data/categories';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	const categories = new Set(posts.flatMap(post => post.data.category || []));
	return Array.from(categories).map(category => ({
		params: { category: category.toLowerCase() },
		props: { category }
	}));
}

interface Props {
	category: string;
}

const { category } = Astro.props as Props;

// Get category data
const categoryData = categories.find(cat => cat.id === category);

// If category doesn't exist, redirect to category listing
if (!categoryData) {
	return Astro.redirect('/category/');
}

// Get all blog posts for this category and sort by date
const posts = (await getCollection('blog'))
	.filter((post) => !post.data.draft && (post.data.category || []).includes(category))
	.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Group by translationGroup (or fallback to id)
const grouped: Record<string, CollectionEntry<'blog'>[]> = {};
for (const post of posts) {
	const group = post.data.translationGroup || post.id;
	if (!grouped[group]) grouped[group] = [];
	grouped[group].push(post);
}
const groupedPosts: CollectionEntry<'blog'>[][] = Object.values(grouped);

const categoryEmojis: Record<string, string> = {
	'art-expression': 'üéµ',
	'diy-creation': 'üõ†Ô∏è',
	'integration-growth': 'üßòüèΩ‚Äç‚ôÇÔ∏è',
	'learning-projects': 'üìö',
	'metaspace': 'üåÄ',
	'parenting': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
	'politics': '‚öñÔ∏è',
	'psychology': 'üß†',
	'systems-strategy': 'üíª'
};

const capitalize = (str: string) => str ? str.charAt(0).toUpperCase() + str.slice(1) : '';
---

<BaseLayout title={`${categoryData.name} - StrongVault`}>
	<main class="content-wrapper">
		<header class="category-header">
			<nav aria-label="Breadcrumb">
				<a href="/category" class="back-link">‚Üê Back to Categories</a>
			</nav>
			<h1>{categoryData.icon} {categoryData.name}</h1>
			<p class="category-description">{categoryData.description}</p>
		</header>

		<section class="posts-grid" aria-label="Posts in this category">
			{groupedPosts.map((translations) => {
				const main = translations[0];
				return (
					<PostCard 
						post={main} 
						translations={translations.map(t => ({
							id: t.id,
							language: t.data.language[0]
						}))}
					/>
				);
			})}
		</section>
	</main>
</BaseLayout>

<style>
	:root {
		--reading-width: 65ch;
		--line-height: 1.75;
		--letter-spacing: -0.011em;
	}

	.category-header {
		text-align: center;
		margin-bottom: 4rem;
		max-width: 800px;
		margin-left: auto;
		margin-right: auto;
	}

	.back-link {
		display: inline-block;
		margin-bottom: 1.5rem;
		color: var(--secondary-color);
		text-decoration: none;
		font-size: 1rem;
		transition: color 0.2s ease;
	}

	.back-link:hover {
		color: var(--accent-color);
	}

	.category-header h1 {
		font-size: 3rem;
		line-height: 1.2;
		margin: 0 0 1rem 0;
		font-weight: 800;
		letter-spacing: -0.025em;
		color: var(--text-color);
	}

	.category-description {
		font-size: 1.25rem;
		line-height: 1.6;
		color: var(--secondary-color);
		margin: 0;
	}

	.posts-grid {
		display: grid;
		gap: 2.5rem;
		max-width: 800px;
		margin: 0 auto;
	}

	@media (max-width: 768px) {
		.category-header h1 {
			font-size: 2.25rem;
		}

		.category-description {
			font-size: 1.125rem;
		}
	}
</style> 